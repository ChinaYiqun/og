线程三种实现方式

1. extend Thread
	 重写run 方法
	 start 启动
2. implements Runnnable 接口
	重写run 方法
	需要把 实现的对象传入到Thread里面再start
2.5 jdk 8 之后
	用lambda表达式 new Thread->{...}

3.通过线程池启动 Executors启动 


线程里面的方法：
	sleep() 阻塞 线程并不会释放它拥有的锁 sleep 完回到 就绪
	yield() 先从cpu离开；别的线程有机会执行；进入到等待队列里面还是依然有可能执行；
			让出一下cpu；返回到【就绪状态】使用场景不常见；让出来一小下。做aqs做压力测试的时候可能用一下。
	join()	t1 调 t2.join() 则让 t2 Counter
Learn1
SyncThread运行；join经常用于等待另外一个进程的结束。保证多个线程按顺序执行。


new NEW start()
						Runable
		Ready 				->			Running		-> Teminated
		在cpu 等待队列	  <-	yield		在CPU


			Block 状态	没有得到锁 是
			
			Waiting 状态	wait()
						LockSupport.park() ->notify() notifyall()会变成 running状态
						t.join() 

			TimedWating 状态
					sleep()
					wait(time)
					t.join(time)	


		stop() 不建议用
		interrupt() 控制业务逻辑也没有


出场率比较高的一道多线程安全面试题sleep( ) 和 wait( ) 的这 5 个区别Java多线程神器：join使用及原理面试常考：Synchronized 有几种用法？任务并行神器：Fork & Join 框架详解本文原创首发于微信公众号：Java技术栈（id:javastack），转载请原样保留本信息。

作者：Java技术栈
链接：https://zhuanlan.zhihu.com/p/61727127
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


1. 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；

2. 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；

前两者等价

3. 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；

4. 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。

A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。

B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。

C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。







