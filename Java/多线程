线程三种实现方式

1. extend Thread
	 重写run 方法
	 start 启动
2. implements Runnnable 接口
	重写run 方法
	需要把 实现的对象传入到Thread里面再start
2.5 jdk 8 之后
	用lambda表达式 new Thread->{...}
	等价于 new Thread(t::function).start()
	new Thread(new Runable( run(){function()}))

3.通过线程池启动 Executors启动 


线程里面的方法：
	sleep() 阻塞 线程并不会释放它拥有的锁 sleep 完回到 就绪
	yield() 先从cpu离开；别的线程有机会执行；进入到等待队列里面还是依然有可能执行；
			让出一下cpu；返回到【就绪状态】使用场景不常见；让出来一小下。做aqs做压力测试的时候可能用一下。
	join()	t1 调 t2.join() 则让 t2 Counter
Learn1
SyncThread运行；join经常用于等待另外一个进程的结束。保证多个线程按顺序执行。


new NEW start()
						Runable
		Ready 				->			Running		-> Teminated
		在cpu 等待队列	  <-	yield		在CPU


			Block 状态	没有得到锁 是
			
			Waiting 状态	wait()
						LockSupport.park() ->notify() notifyall()会变成 running状态
						t.join() 

			TimedWating 状态
					sleep()
					wait(time)
					t.join(time)	


		stop() 不建议用
		interrupt() 控制业务逻辑也没有


出场率比较高的一道多线程安全面试题sleep( ) 和 wait( ) 的这 5 个区别Java多线程神器：join使用及原理面试常考：Synchronized 有几种用法？任务并行神器：Fork & Join 框架详解本文原创首发于微信公众号：Java技术栈（id:javastack），转载请原样保留本信息。

作者：Java技术栈
链接：https://zhuanlan.zhihu.com/p/61727127
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


1. 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码，作用的对象是调用这个代码块的对象；

2. 修饰一个方法，被修饰的方法称为同步方法，其作用的范围是整个方法，作用的对象是调用这个方法的对象；

前两者等价

3. 修饰一个静态的方法，其作用的范围是整个静态方法，作用的对象是这个类的所有对象；

4. 修饰一个类，其作用的范围是synchronized后面括号括起来的部分，作用主的对象是这个类的所有对象。

A. 无论synchronized关键字加在方法上还是对象上，如果它作用的对象是非静态的，则它取得的锁是对象；
如果synchronized作用的对象是一个静态方法或一个类，则它取得的锁是对类，该类所有的对象同一把锁。

B. 每个对象只有一个锁（lock）与之相关联，谁拿到这个锁谁就可以运行它所控制的那段代码。

C. 实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。


Tips
synchronized(Object)
	1.不能用 String Integer Long （不能用常量，基础数据类型）
	2.Object 不能为空；因为会报错


第二天知识点：

JVM 内置机制是 线程之间不可见的！ 一个线程改动了flag，需写回堆中；另一个线程读才能看见这个flag改变了。

volatile 可变的；易变的
	两个作用
	1.保证线程可见性
		MESI 【多CPU 保证缓存一致 用硬件保证】
		缓存一致性协议
	2.禁止指令重排序 (与CPU有关系;CPU为了提高速度 自作聪明
	因为现在CPU是流水线的方式；这就导致编译器对指令进行重新的排序)

		2.1 DCL 单例模式
		2.2	Double Check Lock
		2.3	MGr06.java
			保证在JVM 【只有】一个实例对象；只需new一个
			饿汉式 有需要才会被创建 才会被初始化

				如果不用volatile 的话
				用双重检查【是否为空】+ synchronized；保证多线程创建不会出错

			volatile保证不会有指令重排序，即保证指令按顺序执行
			不加volatile 可能会有的问题：

				new 一个对象分三步
					1.给对象申请内存 [a = 0 b = 0]
					2.初始化变量 		[a = 8 b = 8]
					3.把内存的内容赋值给 instance 
				如果没有指令重排序的话 2，3 回互换位置 再【超高超高；极为罕见】并发的时候可能发这个问题
				Thread1 getinstance 会new() 执行了 1  3 还没执行到 2 
				Thread2 getinstance 已经有了，初始化一半去拿值 拿到的是 [a =0 b = 0]

			
public class Mgr06 {

    private static volatile Mgr06 INSTANCE = null;

    private Mgr06() {

    }

    ConcurrentHashMap chm = null;

    public static Mgr06 getInstance() {
        if (INSTANCE == null) {
            synchronized (Mgr06.class) {
                if (INSTANCE == null) {
                    try {
                        Thread.sleep(1);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    INSTANCE = new Mgr06();
                }
            }
        }
        return INSTANCE;
    }
}

		


	
synchronized与ReentrantLock
区别1 底层实现
	ReentrantLock实现则是通过利用CAS（CompareAndSwap）自旋机制保证线程操作的原子性和volatile保证数据可见性以实现锁的功能

	synchronized 的实现涉及到锁的升级，具体为无锁、偏向锁、自旋锁、向OS申请重量级锁，
区别2 手动释放？
	ReentrantLock 手动释放
	Synchronized 无需
区别3  中断？
	ReentrantLock 可以中断
	trylock(long timeout,TimeUnit unit)设置超时方法或者将lockInterruptibly()放到代码块中，调用interrupt方法进行中断。
区别4  公平？
	synchronized为非公平锁 ReentrantLock则即可以选公平锁也可以选非公平锁，通过构造方法new ReentrantLock时传入boolean值进行选择，为空默认false非公平锁，true为公平锁


