

程序: 硬盘
进程: 指令 + 数据/程序启动 进入内存；资源分配的基本单位
线程:程序执行的基本单位
程序如何开始执行：CPU 读指令->PC(Process Counter)读数据 Register -> 计算 回写->下一条

APP 启用一个线程；之后是由操作系统（OS）进行调度 （调度策略CFS 先不用管很复杂）
线程如何调度的？：操作系统
	操作系统负责调度many线程给多个cpu，不会让某一个线程总是饿着，某一个线程一直执行

问题：超多线程一定提升性能吗？性能是随着线程数是线性增加的吗？
	不是，切换有开销

线程切换：CPU保存现场（Cache），执行别的（PC） 恢复现场 继续执行
	JVM 中的线程不是内核线程
	Go 协程
	C 直接使用内核线程


用户线程：一个应用程序产生的线程
内核线程：操作系统级别的线程
【C 语言直接启动内核线程】
【Java 中一个用户线程对应一个内核线程 1:1 所以Java 直接启动1W个线程就绷了；所以才有了线程池去解决这个问题 
例子1w个用户访问校园网，就崩了 因为线程来来回回切换】

Java 任务之间不能同步；如果同步的话就要自己写代码；没有原生的；所以有 KiLin（Ali） 

【Go/python 协程 m:n (m远远大于n) 更像一个task队列 天生支持多线程】

Go 协程可以同步的,在用户空间里模拟CPU的原理