1.查找

二分查找

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left,right = 0,len(nums)
        while(left < right):
            m = (left + right)//2
            if nums[m] == target:
                return m
            elif nums[m] > target:
                right = m
            else:
                left = m +1
        return -1

二分查找的变形
    1.求平方根
    2.寻找峰值
    3.排序数组中查找第一个和最后一个元素
    4.旋转数组

    2.排序
==============================
2.排序 注意边界条件！
快排
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def fun(start,end,nums):
            if start>= end:
                return nums
            i,j,tmp = start,end,nums[start]
            while(i<j):
                while(i<j and nums[j]>=tmp):
                    j -= 1
                nums[i] = nums[j]
                while(i<j and nums[i]<=tmp):
                    i += 1
                nums[j] = nums[i]
            nums[j] = tmp
            fun(start,j-1,nums)
            fun(j+1,end,nums)
        fun(0,len(nums)-1,nums)
        return nums


快排的变形
    1.最小k个数
    2.最大k个数


归并排序 注意边界条件！

def

            nums.append(right[j])
            j += 1
    nums += left[i:]
    nums += right[j:]
    return nums





def merge_sort(nums):
    if len(nums) <= 1:
        return nums

    m = len(nums) // 2
    left = merge_sort(nums[:m])
    right = merge_sort(nums[m:])
    return merge(left, right)


变形：
逆序对

动态规划
最大子序列和
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        import sys
        # dp i 表示包括自己在内的最大数
        dp = [-sys.maxsize for i in nums]
        ans = nums[0]
        dp[0] = nums[0]
        for i in range(1,len(nums)):
            dp[i] = max(dp[i-1]+nums[i],nums[i])
            ans = max(ans,dp[i])
        return ans

股票的最大利润
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        if len(prices)<=1:
            return 0
        profit = 0
        min_p = prices[0]
        for p in prices[1:]:
            profit = max(profit,p-min_p)
            min_p = min(p,min_p)
        return profit

最长公共子序列
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        n, m = len(text1) ,len(text2)
        dp = [[0]*(m+1) for i in range(n+1)]

        for i in range(1,n+1):
            for j in range(1,m+1):
                print(i-1,j-1)
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = dp[i-1][j-1] +1
                else:
                    dp[i][j] = max(dp[i][j-1],dp[i-1][j])

        return dp[-1][-1]

变种：
    最长重复数组
    编辑距离
    最长回文子串
    最大正方形

链表

删除排序链表中的重复元素

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        # write code here
        newhead = ListNode('h')
        p = newhead
        p.next = head
        while(p):
            tmp = p.next
            # 看下一个节点是否存在连续的情况
            flag = True
            while(tmp and tmp.next):
                # 若不等的话
                if tmp.val != tmp.next.val:
                    break
                else:
                    flag = False
                    tmp = tmp.next
            if flag:
                p = tmp
            else:
                p.next = tmp
        return newhead.next

环形链表 II
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        if not head:
            return None
        
        slow =head
        fast = head
        p = head
        # 第一步快慢指针 判断链表是否有环
        while(True):
            if(fast and fast.next):
                fast = fast.next.next
            else:
                return None
            slow = slow.next  
            if slow == fast:
                break
 
        while(True):
            if slow == p:
                return slow
            else:
                # index += 1
                p = p.next
                slow = slow.next

相交链表

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        p,q = headA,headB
        while(q!=p):
            if p:
                p = p.next
            else:
                p = headB
            if q:
                q = q.next
            else:
                q = headA
        return q

合并两个有序链表
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        newhead = ListNode(-1)
        p = newhead
        while(l1 and l2):
            if l1.val < l2.val:
                p.next = l1
                p = p.next
                l1 = l1.next
            else:
                p.next = l2
                p = p.next
                l2 = l2.next
        if l1:
            p.next = l1
        else:
            p.next = l2


hashmap
# 平行线
from fractions import Fraction
class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if len(points)<=2:
            return len(points)
        ans = 2
        
        for i in range(len(points)):
            mydict = dict()
            node1linemax = 1
            dup = 0
            for j in range(i+1,len(points)):

                point1 = points[i]
                x1,y1 = point1[0],point1[1] 
                point2 = points[j]
                x2,y2 = point2[0],point2[1] 
                if x1==x2 and y1 == y2:
                    dup+=1
                    continue
                # 斜率 k # 截距     
                if x2-x1 != 0:
                    k = Fraction(y2-y1,x2-x1)
                    b = Fraction(y1-(y2-y1)/(x2-x1)*x1)
                else:
                    k = '-'
                    b = x1
                                
               
                if (k,b) not in mydict:
                    mydict[(k,b) ] = 2
                else:
                    mydict[(k,b) ] += 1
                node1linemax = max(mydict[(k,b) ] ,node1linemax)
            print(i,node1linemax+dup)
            ans = max(node1linemax+dup,ans)
        return ans

栈
单调栈 

柱状图中最大的矩形

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = [-1]
        area = 0
        heights.append(0)
        for i in range(len(heights)):
            while heights[i] < heights[stack[-1]]:
                h = heights[stack.pop()]
                area = max(area, h * (i - stack[-1] - 1))
            stack.append(i)
        heights.pop()
        return are


最大矩形

class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:

        # 84 题
        def largestRectangleArea(heights: List[int]) -> int:
            stack = [-1]
            area = 0
            heights.append(0)
            for i in range(len(heights)):
                while heights[i] < heights[stack[-1]]:
                    h = heights[stack.pop()]
                    area = max(area, h * (i - stack[-1] - 1))
                stack.append(i)
            heights.pop()
            return area
        
        # 85 题
        matrix = [list(map(int,line)) for line in matrix]

        for i in range(1,len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] >0:
                    matrix[i][j] += matrix[i-1][j]
        ans = 0
        for line in matrix:
            ans = max(largestRectangleArea(line),ans)

        return ans

最大正方形
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        # 84 题 修
        def largestRectangleArea(heights: List[int]) -> int:
            stack = [-1]
            area = 0
            heights.append(0)
            for i in range(len(heights)):
                while heights[i] < heights[stack[-1]]:
                    h = heights[stack.pop()]
                    # 修
                    if h <= i - stack[-1] - 1:
                        area = max(area, h * h)
                stack.append(i)
            heights.pop()
            return area
        
        # 85 题
        matrix = [list(map(int,line)) for line in matrix]

        for i in range(1,len(matrix)):
            for j in range(len(matrix[0])):
                if matrix[i][j] >0:
                    matrix[i][j] += matrix[i-1][j]
        ans = 0
        for line in matrix:
            ans = max(largestRectangleArea(line),ans)

        return ans


二叉树 

层次遍历




先序 中序遍历


二分堆

1总结 fasttext
2手写 tensorflow


4.栈 
温度


括号
class Solution:
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        stack = list()
        hashmap = {')':'(','}':'{',']':'['}
        for c in s:
            # c 是左括号的话
            if c not in hashmap:
                stack.append(c)
            # c 是右括号的话，看这个栈顶元素和 当前的c 是否呼应
            else:
                if not stack or stack.pop() != hashmap[c]:
                    return False

        if stack:
            return False
        return True
最大矩形
柱状图中最大的矩形

始终维持一个递增的栈（存下标）
class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = [-1]
        area = 0
        heights.append(0)
        for i in range(len(heights)):
            # 若当前元素小于 栈顶
            while heights[i] < heights[stack[-1]]:
                h = heights[stack.pop()]
                area = max(area, h * (i - stack[-1] - 1))
            stack.append(i)
        heights.pop()
        return area
每日温度
class Solution:
    def dailyTemperatures(self, T: List[int]) -> List[int]:
        
        stack = []
        nums = [0 for i in range(len(T))]
        for i in range(len(T)):
            cur = T[i]
            while(stack and T[stack[-1]]<cur):
                top_index = stack.pop()
                nums[top_index] = i - top_index
            else:
                stack.append(i)

        return nums