事务所提供的安全保证，通常由首字母缩略词ACID来描述——
原子性（Atomicity）、
	安全地重试
一致性（Consistency）、

	果做一个财务系统，账户A转钱到账户B，那么账户A中减少的钱与账户B中增加的钱必须相等

	应用程序来保证
隔离性（Isolation）、
	同时执行的事务不能相互冒犯
持久性（Durability）。
	安全地存储数据

Read Uncommitted（读取未提交内容）

Read Committed（读取提交内容）

Repeatable Read（可重读）

Serializable（可串行化）

MVCC是在并发访问数据库时，通过对数据做【多版本管理】，避免因为写锁的阻塞而造成读数据的并发阻塞问题。

通俗的讲就是MVCC通过保存数据的历史版本，根据比较版本号来处理数据的是否显示，从而达到读取数据的时候不需要加锁就可以保证事务隔离性的效果




数据库里有的锁有很多种，为了方面理解，所以我根据其相关性"人为"的对锁进行了一个分类，分别如下

基于锁的属性分类：共享锁、排他锁。
	共享锁又称读锁
	排他锁的目的是在数据修改时候，不允许其他人同时修改，也不允许其他人读取

基于锁的粒度分类：表锁、行锁、记录锁、间隙锁、临键锁。
行锁是指上锁的时候锁住的是表的某一行或多行记录
记录锁也属于行锁中的一种，只不过记录锁的范围只是表中的某一条记录，记录锁是说事务在加锁后锁住的只是表的某一条记录。
间隙锁属于行锁中的一种，间隙锁是在事务加锁后其锁住的是表记录的某一个区间，当表的相邻ID之间出现空隙则会形成一个区间，遵循左开右闭原则。比如下面的表里面的数据ID 为 1,4,5,7,10 ,那么会形成以下几个间隙区间，-n-1区间，1-4区间，7-10区间，10-n区间 （-n代表负无穷大，n代表正无穷大）

临键锁(Next-Key Lock)

临键锁也属于行锁的一种，并且它是INNODB的行锁默认算法，总结来说它就是记录锁和间隙锁的组合，临键锁会把查询出来的记录锁住，同时也会把该范围查询内的所有间隙空间也会锁住，再之它会把相邻的下一个区间也会锁住。

例如：下面表的数据执行 select * from user_info where id>1 and id<=13 for update ;

基于锁的状态分类：意向共享锁、意向排它锁。

